version: '3.8'

services:
  api:
    container_name: api
    build: "./backend"
    working_dir: /home/node
    env_file:
      - backend/_docker/development/common.env
      - backend/_docker/development/api.env
    volumes:
      - ./backend:/home/node:delegated
      - ./var/log:/var/log:delegated
    ports:
      - 3000:3000
    entrypoint: "api-entrypoint.sh"
    command: ["npm", "run", "dev"]
    networks:
      taskiify:
    depends_on:
      - db
  cron:
    container_name: cron
    build: "./backend"
    working_dir: /home/node
    env_file:
      - backend/_docker/development/common.env
      - backend/_docker/development/cron.env
    volumes:
      - ./backend:/home/node:delegated
      - ./var/log:/var/log:delegated
    entrypoint: "cron-entrypoint.sh"
    command: ["cron", "-f"]
    networks:
      taskiify:
    depends_on:
      - api
  ui:
    container_name: ui
    build: "./ui"
    working_dir: /home/node
    environment:
      PORT: 8080
      NODE_ENV: development
    volumes:
      - ./ui:/home/node:delegated
    ports:
      - 8080:8080
    entrypoint: npm
    command: start
    networks:
      taskiify:
    depends_on:
      - api
  db:
    container_name: db
    restart: always
    image: mysql/mysql-server:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_ROOT_HOST: "%"
    ports:
      - 3306:3306
    networks:
      taskiify:
        aliases: ["mysql.docker.internal"]
    volumes:
      - db:/var/lib/mysql

networks:
  taskiify:
    driver: bridge

volumes:
  db:
